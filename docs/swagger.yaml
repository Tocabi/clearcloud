definitions:
  controller.ApiError:
    properties:
      description:
        type: string
      details:
        type: object
      error:
        type: string
      status:
        type: integer
    type: object
  controller.BrowseRequest:
    properties:
      path:
        type: string
    type: object
  controller.BrowseResponse:
    properties:
      folders:
        items:
          $ref: '#/definitions/controller.BrowseResponseFolder'
        type: array
      parent:
        type: string
      path:
        type: string
    type: object
  controller.BrowseResponseFolder:
    properties:
      path:
        type: string
    type: object
  controller.CreateLibraryDTO:
    properties:
      name:
        type: string
      rootFolder:
        type: string
      type:
        enum:
        - generic
        - books
        - movies
        - shows
        - music
        type: string
    required:
    - name
    - rootFolder
    type: object
  controller.CreateUserDTO:
    properties:
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - firstName
    - lastName
    - password
    - username
    type: object
  controller.HealthCheckResponse:
    properties:
      healthy:
        type: boolean
      services:
        items:
          $ref: '#/definitions/controller.HealthCheckService'
        type: array
    type: object
  controller.HealthCheckService:
    properties:
      healthy:
        type: boolean
      name:
        type: string
    type: object
  controller.LibraryDetails:
    properties:
      id:
        type: integer
      name:
        type: string
      rootFolder:
        type: string
      sharedWith:
        items:
          $ref: '#/definitions/model.CanAccessLibrary'
        type: array
      type:
        enum:
        - generic
        - books
        - movies
        - shows
        - music
        type: string
    type: object
  controller.LibraryPage:
    properties:
      elements:
        items:
          $ref: '#/definitions/controller.LibrarySummary'
        type: array
      totalElements:
        type: integer
    type: object
  controller.LibrarySummary:
    properties:
      canWrite:
        type: boolean
      id:
        type: integer
      name:
        type: string
      type:
        enum:
        - generic
        - books
        - movies
        - shows
        - music
        type: string
    type: object
  controller.ShareLibraryDTO:
    properties:
      canWrite:
        type: boolean
      userId:
        type: integer
    required:
    - userId
    type: object
  controller.UpdateLibraryDTO:
    properties:
      name:
        type: string
    type: object
  controller.UpdateUserDTO:
    properties:
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  controller.UserPage:
    properties:
      elements:
        items:
          $ref: '#/definitions/controller.UserSummary'
        type: array
      totalElements:
        type: integer
    type: object
  controller.UserSummary:
    properties:
      firstName:
        type: string
      id:
        type: integer
      isAdmin:
        type: boolean
      lastName:
        type: string
      username:
        type: string
    type: object
  model.CanAccessLibrary:
    properties:
      canWrite:
        type: boolean
      user:
        $ref: '#/definitions/model.User'
    type: object
  model.Library:
    properties:
      id:
        type: integer
      name:
        type: string
      rootFolder:
        type: string
      type:
        enum:
        - generic
        - books
        - movies
        - shows
        - music
        type: string
    type: object
  model.User:
    properties:
      firstName:
        type: string
      id:
        type: integer
      isAdmin:
        type: boolean
      lastName:
        type: string
      username:
        type: string
    type: object
  service.FileInfo:
    properties:
      category:
        type: string
      mimeType:
        type: string
      modified:
        type: string
      name:
        type: string
      parent:
        type: string
      size:
        type: integer
    type: object
info:
  contact:
    email: thomas.biesaart@protonmail.com
    name: ClearCloud Team
    url: https://github.com/ChappIO/clearcloud/issues
  title: ClearCloud API
  version: development
paths:
  /api/libraries:
    get:
      parameters:
      - default: 1
        description: The page number to fetch
        in: query
        name: page
        type: integer
      - default: 20
        description: The maximum number of elements to return
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.LibraryPage'
      security:
      - OAuth2: []
      summary: Search the collection of libraries
      tags:
      - Files
    post:
      parameters:
      - description: The new library
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.CreateLibraryDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Library'
      security:
      - OAuth2: []
      summary: Add a new library
      tags:
      - Files
  /api/libraries/{libraryId}:
    delete:
      description: This does not delete the files in the library from the disk
      parameters:
      - description: The library id
        in: path
        name: libraryId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: ""
      security:
      - OAuth2: []
      summary: Delete a library
      tags:
      - Files
    get:
      parameters:
      - description: The library id
        in: path
        name: libraryId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.LibraryDetails'
      security:
      - OAuth2: []
      summary: Get library details
      tags:
      - Files
    patch:
      parameters:
      - description: The changes
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.UpdateLibraryDTO'
      - description: The library id
        in: path
        name: libraryId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Library'
      security:
      - OAuth2: []
      summary: Update an existing library
      tags:
      - Files
  /api/libraries/{libraryId}/entries:
    get:
      parameters:
      - description: The parent folder
        in: query
        name: parent
        type: string
      - description: The entry path. If this value is set, all other parameters are
          ignored and a maximum of 1 value is returned.
        in: query
        name: path
        type: string
      - description: The library id
        in: path
        name: libraryId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/service.FileInfo'
            type: array
      security:
      - OAuth2: []
      summary: Search the collection of files and folders
      tags:
      - Files
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: The library id
        in: path
        name: libraryId
        required: true
        type: integer
      - description: The name of the new entry. Required when creating a folder.
        in: formData
        name: name
        type: string
      - description: The path to the parent folder. When missing this creates a file
          or folder in the root of the library.
        in: formData
        name: parent
        type: string
      - description: The file contents. Required when creating a file.
        in: formData
        name: data
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.FileInfo'
      security:
      - OAuth2: []
      summary: Create a new file or folder
      tags:
      - Files
  /api/libraries/{libraryId}/entries/{path}:
    delete:
      parameters:
      - description: The url encoded path
        in: path
        name: path
        required: true
        type: string
      - description: The library id
        in: path
        name: libraryId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: ""
      security:
      - OAuth2: []
      summary: Delete a file or folder
      tags:
      - Files
  /api/libraries/{libraryId}/entries/{path}/download:
    get:
      parameters:
      - description: The url encoded path
        in: path
        name: path
        required: true
        type: string
      - description: The library id
        in: path
        name: libraryId
        required: true
        type: integer
      responses:
        "200":
          description: ""
      security:
      - OAuth2: []
      summary: Search the collection of files and folders
      tags:
      - Files
  /api/libraries/{libraryId}/shares:
    post:
      parameters:
      - description: The rights to grant to a specific user
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.ShareLibraryDTO'
      - description: The library id
        in: path
        name: libraryId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: ""
      security:
      - OAuth2: []
      summary: Share a library with a user
      tags:
      - Files
  /api/libraries/{libraryId}/shares/{userId}:
    delete:
      parameters:
      - description: The library id
        in: path
        name: libraryId
        required: true
        type: integer
      - description: The user id
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: ""
      security:
      - OAuth2: []
      summary: Unshare a library
      tags:
      - Files
  /api/system/browse:
    post:
      parameters:
      - description: The request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.BrowseRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.BrowseResponse'
      security:
      - OAuth2: []
      summary: Browse the system storage to find paths
      tags:
      - System
  /api/system/health:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.HealthCheckResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/controller.HealthCheckResponse'
      summary: Run a simple healthcheck on all required systems
      tags:
      - System
  /api/user:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      security:
      - OAuth2: []
      summary: Get the currently authenticated user information
      tags:
      - Authentication
    patch:
      parameters:
      - description: The changes
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.UpdateUserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      security:
      - OAuth2: []
      summary: Update the currently authenticated user
      tags:
      - Authentication
  /api/users:
    get:
      parameters:
      - default: 1
        description: The page number to fetch
        in: query
        name: page
        type: integer
      - default: 20
        description: The maximum number of elements to return
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.UserPage'
      security:
      - OAuth2: []
      summary: Search the collection of users
      tags:
      - Authentication
    post:
      parameters:
      - description: The new user
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.CreateUserDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.User'
        "409":
          description: This username is already taken
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - OAuth2: []
      summary: Add a new user
      tags:
      - Authentication
  /api/users/{userId}:
    delete:
      parameters:
      - description: The user id
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: ""
      security:
      - OAuth2: []
      summary: Delete a user
      tags:
      - Authentication
    get:
      parameters:
      - description: The user id
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      security:
      - OAuth2: []
      summary: Get user details
      tags:
      - Authentication
    patch:
      parameters:
      - description: The changes
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.UpdateUserDTO'
      - description: The user id
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      security:
      - OAuth2: []
      summary: Update an existing user
      tags:
      - Authentication
securityDefinitions:
  OAuth2:
    flow: password
    tokenUrl: /oauth2/token
    type: oauth2
swagger: "2.0"
