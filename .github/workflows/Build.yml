name: Build KeyDrive

on:
  pull_request:
  push:
    branches:
      - main
  release:
    types:
      - created

jobs:

  test_frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: 'web/.nvmrc'
      - uses: actions/cache@v4
        with:
          path: 'web/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('web/package-lock.json') }}
      - name: Install NPM Dependencies
        working-directory: web
        run: npm ci
      - name: Run Frontend Linting
        working-directory: web
        run: npm run lint -- -f json -o eslint-report.json || true
      - name: Run React Tests
        working-directory: web
        run: npm test -- --coverage --reporter=default --reporter=jest-junit
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v2
        with:
          report_paths: 'web/junit.xml'
      - uses: actions/upload-artifact@v4
        with:
          name: frontend-tests
          path: |
            web/coverage/lcov.info
            web/eslint-report.json
            web/junit.xml

  test_backend:
    name: Test Backend
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '^1.20'
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install go dependencies
        run: go get -u github.com/jstemmer/go-junit-report && go install github.com/jstemmer/go-junit-report
      - name: Run Backend Tests
        run: go test -v -coverprofile=coverage.out ./... 2>&1 | go-junit-report > junit.xml
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v2
        with:
          report_paths: 'junit.xml'
      - uses: actions/upload-artifact@v4
        with:
          name: backend-tests
          path: |
            coverage.out
            junit.xml

  build_frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: 'web/.nvmrc'
      - uses: actions/cache@v4
        with:
          path: 'web/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('web/package-lock.json') }}
      - name: Install NPM Dependencies
        working-directory: web
        run: npm ci
      - name: Build Frontend
        working-directory: web
        run: npm run build
      - uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: web/build

  build_backend:
    needs:
      - build_frontend
    name: Build Backend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: linux-x64
            goopts: GOOS=linux GOARCH=amd64
          - name: linux-armv6
            goopts: GOOS=linux GOARCH=arm GOARM=6
    env:
      CGO_ENABLED: "0"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '^1.20'
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: web/build
      - run: ${{ matrix.goopts }} go build -o ./keydrive ./main.go
      - run: chmod +x ./keydrive
      - uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.name }}
          path: ./keydrive

  build_docker:
    needs:
      - build_backend
    name: Build Docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: binary-linux-x64
          path: linux/amd64/keydrive
      - uses: actions/download-artifact@v4
        with:
          name: binary-linux-armv6
          path: linux/arm/v6/keydrive
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/keydrive/keydrive
          tags: |
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=edge,branch=main
      - uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm/v6
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
