
def binary(goopts, folder) {
  sh "mkdir -p ${folder}"
  sh "${goopts} go build -o ${folder}/clearcloud ./main.go"
  sh "chmod +x ${folder}/clearcloud"
}

String waitForContainer(Object container, int port) {
  def ip = sh(returnStdout: true, script: "docker inspect -f '{{ .NetworkSettings.IPAddress }}' ${container.id}").trim()
  sh "while ! bash -c 'echo > /dev/tcp/${ip}/${port}'; do sleep 4; done"
  return ip
}

def dockerTag() {
  switch(env.BRANCH_NAME) {
     case "main":
       return "preview";
     default:
       return env.BRANCH_NAME;
  }
}

pipeline {
  agent none
  environment {
    DOCKER_TAG = "tocabi/clearcloud:${dockerTag()}"
  }
  stages {
    stage('Build Frontend') {
      agent {
        docker {
          label 'docker && linux && amd64'
          image 'node:16'
        }
      }
      steps {
        // Test the frontend
        sh 'yarn --cwd web install --frozen-lockfile'
        sh 'yarn --cwd web lint -f json -o eslint-report.json || true'
        sh 'yarn --cwd web test --ci --coverage --reporters=default --reporters=jest-junit'
        junit checksName: 'React Tests', testResults: 'web/junit.xml'
        stash includes: 'web/coverage/lcov.info,web/eslint-report.json,web/junit.xml', name: 'frontend-tests', useDefaultExcludes: false
        sh 'yarn --cwd web build'
        stash includes: 'web/build/**', name: 'frontend-build', useDefaultExcludes: false
      }
    }
    stage('Build Binaries') {
      agent {
        docker {
          label 'docker && linux && amd64'
          image 'golang:1.16'
          args '-v /root/go/pkg/mod/cache:/root/go/pkg/mod/cache -v /usr/bin/docker:/usr/bin/docker -v /var/run/docker.sock:/var/run/docker.sock'
        }
      }
      environment {
        CGO_ENABLED = "0"
      }
      steps {

        // Test the backend
        script {
          docker.image('postgres:13').withRun('-e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres') { c ->
            unstash 'frontend-build'
            sh 'go get -u github.com/jstemmer/go-junit-report'
            def postgresIp = waitForContainer(c, 5432)
            sh "POSTGRES_HOST=${postgresIp} go test -v -coverprofile=coverage.out ./... 2>&1 | go-junit-report > junit.xml"
          }
        }
        junit checksName: 'Go Tests', testResults: 'junit.xml'
        stash includes: 'coverage.out,junit.xml', name: 'backend-tests', useDefaultExcludes: false

        // Build the binaries
        binary("", "linux/amd64")
        binary("GOARCH=arm GOARM=6", "linux/arm/v6")
        stash includes: 'linux/**', name: 'docker-binaries', useDefaultExcludes: false
      }
    }
    stage('Sonar') {
      agent {
        docker {
          label 'docker && linux && amd64'
          image 'sonarsource/sonar-scanner-cli'
        }
      }
      environment {
        SONAR_LOGIN = credentials('SONAR_LOGIN')
      }
      steps {
        unstash 'frontend-tests'
        unstash 'backend-tests'
        script {
          if(env.CHANGE_ID) {
            sh 'sonar-scanner -Dsonar.login="$SONAR_LOGIN" -Dsonar.pullrequest.key="$CHANGE_ID" -Dsonar.pullrequest.branch="$CHANGE_BRANCH" -Dsonar.pullrequest.base="$CHANGE_TARGET"'
          } else {
            sh 'sonar-scanner -Dsonar.login="$SONAR_LOGIN" -Dsonar.branch.name="$BRANCH_NAME"'
          }
        }
      }
    }
    stage('Docker Distribution') {
      agent {
        label 'docker && amd64'
      }
      environment {
        DOCKER_LOGIN = credentials('DOCKER_LOGIN')
      }
      steps {
        unstash 'docker-binaries'
        sh 'docker login --username $DOCKER_LOGIN_USR --password "$DOCKER_LOGIN_PSW"'
        sh 'docker build --no-cache --platform linux/amd64,linux/arm/v6 --push -t $DOCKER_TAG .'
      }
    }
  }
}
