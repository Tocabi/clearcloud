pipeline {
  agent {
    dockerfile {
      dir 'build'
      label 'docker && amd64 && buildx-multi'
      args '-v /var/run/docker.sock:/var/run/docker.sock -v /root/go/pkg/mod/cache:/root/go/pkg/mod/cache'
    }
  }
  environment {
    DOCKER_TAG = "tocabi/clearcloud:${env.BRANCH_NAME}"
    CGO_ENABLE = "0"
  }
  stages {
    stage('Build') {
      parallel {
        stage('Backend') {
          steps {
           sh "go mod download"
           sh "go test -v -coverprofile=coverage.out ./... 2>&1 | go-junit-report > junit.xml"
           sh "GOOS=linux GOARCH=amd64 go build -o clearcloud ./main.go"
           sh "chmod +x clearcloud"
           stash includes: 'clearcloud', name: 'binary-linux-amd64', useDefaultExcludes: false
           sh "GOOS=linux GOARCH=arm64 go build -o clearcloud ./main.go"
           sh "chmod +x clearcloud"
           stash includes: 'clearcloud', name: 'binary-linux-arm64', useDefaultExcludes: false
          }
          post {
            always {
              stash includes: 'coverage.out,junit.xml', name: 'backend-tests', useDefaultExcludes: false
              junit 'junit.xml'
            }
          }
        }
        stage('Frontend') {
          steps {
            sh 'yarn --cwd web install --frozen-lockfile'
            sh 'yarn --cwd web lint  -f json -o eslint-report.json || true'
            sh 'yarn --cwd web test --ci --coverage --reporters=default --reporters=jest-junit'
            stash includes: 'web/coverage/lcov.info,web/eslint-report.json,web/junit.xml', name: 'frontend-tests', useDefaultExcludes: false
            sh 'yarn --cwd web build'
            stash includes: 'web/build/**', name: 'frontend-build', useDefaultExcludes: false
          }
          post {
            always {
              junit 'web/junit.xml'
            }
          }
        }
      }
    }
    stage('Post Build') {
      parallel {
        stage('Sonar') {
          environment {
            SONAR_LOGIN = credentials('SONAR_LOGIN')
          }
          steps {
            unstash 'frontend-tests'
            unstash 'backend-tests'
            script {
              if(env.CHANGE_ID) {
                sh 'sonar-scanner -Dsonar.login="$SONAR_LOGIN" -Dsonar.pullrequest.key="$CHANGE_ID" -Dsonar.pullrequest.branch="$CHANGE_BRANCH" -Dsonar.pullrequest.base="$CHANGE_TARGET"'
              } else {
                sh 'sonar-scanner -Dsonar.login="$SONAR_LOGIN" -Dsonar.branch.name="$BRANCH_NAME"'
              }
            }
          }
        }
        stage('Docker Distribution') {
          environment {
            DOCKER_LOGIN = credentials('DOCKER_LOGIN')
          }
          steps {
            sh 'docker login --username $DOCKER_LOGIN_USR --password "$DOCKER_LOGIN_PSW"'
            unstash 'frontend-build'
            unstash 'binary-linux-amd64'
            sh 'docker build --platform linux/amd64 --load -t $DOCKER_TAG-amd64 .'
            unstash 'binary-linux-arm64'
            sh 'docker build --platform linux/amd64 --load -t $DOCKER_TAG-arm64 .'
          }
        }
      }
    }
  }
}