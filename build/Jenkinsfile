pipeline {
  agent none
  environment {
    DOCKER_TAG = "tocabi/clearcloud:${env.BRANCH_NAME}"
    CGO_ENABLE = "0"
  }
  stages {
    stage('Build Frontend') {
      agent {
        docker {
          label 'docker && linux && amd64'
          image 'node:16'
        }
      }
      steps {
        // Test the frontend
        sh 'yarn --cwd web install --frozen-lockfile'
        sh 'yarn --cwd web lint  -f json -o eslint-report.json || true'
        sh 'yarn --cwd web test --ci --coverage --reporters=default --reporters=jest-junit'
        junit checksName: 'React Tests', testResults:  'web/junit.xml'
        stash includes: 'web/coverage/lcov.info,web/eslint-report.json,web/junit.xml', name: 'frontend-tests', useDefaultExcludes: false
        sh 'yarn --cwd web build'
        stash includes: 'web/build/**', name: 'frontend-build', useDefaultExcludes: false
      }
    }
    stage('Build Binaries') {
      agent {
        docker {
          label 'docker && linux && amd64'
          image 'golang:1.16'
          args '-v /root/go/pkg/mod/cache:/root/go/pkg/mod/cache'
        }
      }
      steps {
        unstash 'frontend-build'

        // Test the backend
        sh "go mod download"
        sh 'go get -u github.com/jstemmer/go-junit-report'
        sh "go test -v -coverprofile=coverage.out ./... 2>&1 | go-junit-report > junit.xml"
        junit checksName: 'Go Tests', testResults: 'junit.xml'
        stash includes: 'coverage.out,junit.xml', name: 'backend-tests', useDefaultExcludes: false

        // Build the binaries
        sh "mkdir -p linux/arm64 linux/amd64 linux/arm/v7"
        sh "GOOS=linux GOARCH=amd64 go build -o linux/amd64/clearcloud ./main.go"
        sh "chmod +x linux/amd64/clearcloud"
        sh "GOOS=linux GOARCH=arm64 go build -o linux/arm64/clearcloud ./main.go"
        sh "chmod +x linux/arm64/clearcloud"
        sh "GOOS=linux GOARCH=arm go build -o linux/arm/v7/clearcloud ./main.go"
        sh "chmod +x linux/arm/v7/clearcloud"
        stash includes: 'linux/**', name: 'binaries', useDefaultExcludes: false
      }
    }
    stage('Post Build') {
      parallel {
        stage('Sonar') {
          agent {
            docker {
              label 'docker && linux && amd64'
              image 'sonarsource/sonar-scanner-cli'
            }
          }
          environment {
            SONAR_LOGIN = credentials('SONAR_LOGIN')
          }
          steps {
            unstash 'frontend-tests'
            unstash 'backend-tests'
            script {
              if(env.CHANGE_ID) {
                sh 'sonar-scanner -Dsonar.login="$SONAR_LOGIN" -Dsonar.pullrequest.key="$CHANGE_ID" -Dsonar.pullrequest.branch="$CHANGE_BRANCH" -Dsonar.pullrequest.base="$CHANGE_TARGET"'
              } else {
                sh 'sonar-scanner -Dsonar.login="$SONAR_LOGIN" -Dsonar.branch.name="$BRANCH_NAME"'
              }
            }
          }
        }
        stage('Docker Distribution') {
          agent {
            label 'docker && amd64'
          }
          environment {
            DOCKER_LOGIN = credentials('DOCKER_LOGIN')
          }
          steps {
            unstash 'binaries'
            sh 'docker login --username $DOCKER_LOGIN_USR --password "$DOCKER_LOGIN_PSW"'
            sh 'docker build --no-cache --platform linux/amd64,linux/arm64,linux/arm/v7 --push -t $DOCKER_TAG .'
          }
        }
      }
    }
  }
}